// <auto-generated />
using System;
using MemUp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MemUp.Migrations
{
    [DbContext(typeof(MemUpDbContext))]
    partial class MemUpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ApplicationUserCourse", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsersId")
                        .HasColumnType("TEXT");

                    b.HasKey("CoursesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserCourse");
                });

            modelBuilder.Entity("CourseWord", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WordsId")
                        .HasColumnType("TEXT");

                    b.HasKey("CoursesId", "WordsId");

                    b.HasIndex("WordsId");

                    b.ToTable("CourseWord");
                });

            modelBuilder.Entity("MemUp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("MemUp.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MemUp.Models.Sentence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("SentenceText")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SentenceTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SentenceTypeId");

                    b.HasIndex("WordId");

                    b.ToTable("Sentence");
                });

            modelBuilder.Entity("MemUp.Models.SentenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SentenceType");
                });

            modelBuilder.Entity("MemUp.Models.Word", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishVocab")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("JapaneseVocab")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("KanaVocab")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PartOfSpeech")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("ApplicationUserCourse", b =>
                {
                    b.HasOne("MemUp.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemUp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseWord", b =>
                {
                    b.HasOne("MemUp.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemUp.Models.Word", null)
                        .WithMany()
                        .HasForeignKey("WordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemUp.Models.Sentence", b =>
                {
                    b.HasOne("MemUp.Models.SentenceType", "SentenceType")
                        .WithMany("Sentences")
                        .HasForeignKey("SentenceTypeId");

                    b.HasOne("MemUp.Models.Word", "Word")
                        .WithMany("Sentences")
                        .HasForeignKey("WordId");

                    b.Navigation("SentenceType");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("MemUp.Models.SentenceType", b =>
                {
                    b.Navigation("Sentences");
                });

            modelBuilder.Entity("MemUp.Models.Word", b =>
                {
                    b.Navigation("Sentences");
                });
#pragma warning restore 612, 618
        }
    }
}
