// <auto-generated />
using System;
using MemUp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MemUp.Migrations
{
    [DbContext(typeof(MemUpDbContext))]
    [Migration("20210112201503_AddTableDbSets")]
    partial class AddTableDbSets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10");

            modelBuilder.Entity("MemUp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("MemUp.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MemUp.Models.CourseUser", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("MemUp.Models.CourseWord", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WordId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId", "WordId");

                    b.HasIndex("WordId");

                    b.ToTable("CourseWord");
                });

            modelBuilder.Entity("MemUp.Models.Sentence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("SentenceText")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<Guid?>("SentenceTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SentenceTypeId");

                    b.HasIndex("WordId");

                    b.ToTable("Sentence");
                });

            modelBuilder.Entity("MemUp.Models.SentenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("SentenceType");
                });

            modelBuilder.Entity("MemUp.Models.Word", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishVocab")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("JapaneseVocab")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("KanaVocab")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<string>("PartOfSpeech")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Word");
                });

            modelBuilder.Entity("MemUp.Models.CourseUser", b =>
                {
                    b.HasOne("MemUp.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("CourseUsers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemUp.Models.Course", "Course")
                        .WithMany("CourseUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemUp.Models.CourseWord", b =>
                {
                    b.HasOne("MemUp.Models.Course", "Course")
                        .WithMany("CourseWords")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemUp.Models.Word", "Word")
                        .WithMany("CourseWords")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemUp.Models.Sentence", b =>
                {
                    b.HasOne("MemUp.Models.SentenceType", "SentenceType")
                        .WithMany("Sentences")
                        .HasForeignKey("SentenceTypeId");

                    b.HasOne("MemUp.Models.Word", "Word")
                        .WithMany("Sentences")
                        .HasForeignKey("WordId");
                });
#pragma warning restore 612, 618
        }
    }
}
